#!/bin/bash

# Pre-commit hook to ensure Perl scripts and INI files have the required header and versioning

# Function to update the header of a Perl script
update_header_perl() {
    local file="$1"
    local filename=$(basename "$file")
    local shebang=$(grep -Eo '^#!.*perl' "$file" | head -1)
    local author=$(git config user.name)
    local content=$(<"$file") # Read the current contents of the file

    # Function to determine the next version
    get_next_version() {
        # Extract the latest tag for this specific file, filtering by the expected format
        local latest_tag
        latest_tag=$(git tag --list "${filename}_v*" --sort=-v:refname | grep -E "^${filename}_v[0-9]+\.[0-9]+\.[0-9]+$" | head -1)

        # Check if the latest tag follows semantic versioning (e.g., scriptname_v1.2.3)
        local version
        if [[ "$latest_tag" =~ ^${filename}_v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Parse version components
            version="${latest_tag#${filename}_v}" # Remove the 'scriptname_v' prefix
            IFS='.' read -r major minor patch <<< "$version"

            # Increment patch version
            patch=$((patch + 1))
        else
            # Initialize semantic versioning from v0.0.1
            major=0
            minor=0
            patch=1
        fi

        # Construct the new version
        local new_version="$major.$minor.$patch"

        # Check if the new tag already exists on remote and increment if needed
        while git ls-remote --tags origin | grep -q "refs/tags/${filename}_v$new_version"; do
            patch=$((patch + 1))
            new_version="$major.$minor.$patch"
        done

        echo "$new_version"
    }

    # Get the next version
    local new_version
    new_version=$(get_next_version)

    # Get the current timestamp
    local timestamp
    timestamp=$(date +"%Y-%m-%d %H:%M:%S %z")

    # Prepare the new header
    local new_header
    new_header="$shebang\n\n# Version: $new_version\n# Timestamp: $timestamp\n# Author: $author"

    # Adjust the format for printf to maintain line breaks
    printf "%b\n" "$new_header"

    # Split content into header and script body if header exists
    local header body new_content
    if grep -q '^# Author:' "$file"; then
        header=$(printf "%s" "$content" | sed -n '/^#!/,/^# Author:/p')
        body=$(printf "%s" "$content" | sed '1,/^# Author:/d')
        
        # Remove previous header components
        body=$(printf "%s" "$body" | sed '/^#!/d' | sed '/^# Version:/d' | sed '/^# Timestamp:/d' | sed '/^# Author:/d')
        
        # Combine the new header and original body
        new_content=$(printf "%b\n%s" "$new_header" "$body")
    else
        # If no existing header, remove the shebang line if present
        body=$(printf "%s" "$content" | sed '/^#!.*perl/d')
        new_content=$(printf "%b\n%s" "$new_header" "$body")
    fi

    # Update the file with the new content
    printf "%s\n" "$new_content" > "$file"

    # Try to create and push the new tag with a locking mechanism
    local new_tag="${filename}_v$new_version"
    local lock_file=".tag_creation_lock"
    local lock_timeout=30
    local start_time=$(date +%s)

    while : ; do
        # Attempt to create a lock file
        if ( set -o noclobber; echo "$$" > "$lock_file" ) 2> /dev/null; then
            trap 'rm -f "$lock_file"; exit $?' INT TERM EXIT

            # Create and push the new tag
            if git tag -a "$new_tag" -m "Version $new_version"; then
                if git push origin "$new_tag"; then
                    rm -f "$lock_file"
                    trap - INT TERM EXIT
                    break
                else
                    rm -f "$lock_file"
                    trap - INT TERM EXIT
                    echo "Failed to push tag $new_tag. Exiting."
                    exit 1
                fi
            else
                rm -f "$lock_file"
                trap - INT TERM EXIT
                echo "Tag $new_tag already exists. Incrementing version..."
                new_version=$(get_next_version)
                new_tag="${filename}_v$new_version"
            fi
        else
            # Check if lock timeout has been reached
            if (( $(date +%s) - $start_time > $lock_timeout )); then
                echo "Error: Failed to acquire lock within $lock_timeout seconds."
                exit 1
            fi
            echo "Waiting for lock... retrying"
            sleep 2
        fi
    done
}

# Function to update the header of an INI file
update_header_ini() {
    local file="$1"
    local filename=$(basename "$file")
    local content=$(<"$file") # Read the current contents of the file

    # Function to determine the next version
    get_next_version() {
        # Extract the latest tag for this specific file, filtering by the expected format
        local latest_tag
        latest_tag=$(git tag --list "${filename}_v*" --sort=-v:refname | grep -E "^${filename}_v[0-9]+$" | head -1)

        # Check if the latest tag follows the format (e.g., scriptname_v1)
        local version
        if [[ "$latest_tag" =~ ^${filename}_v[0-9]+$ ]]; then
            # Parse the version number
            version="${latest_tag#${filename}_v}" # Remove the 'scriptname_v' prefix
            local new_version=$((version + 1))
        else
            # Initialize versioning from v1
            local new_version=1
        fi

        echo "$new_version"
    }

    # Get the next version
    local new_version
    new_version=$(get_next_version)

    # Prepare the new content with updated version
    local new_content
    new_content=$(printf "%s\n\n[version]\nnumber=%s" "$content" "$new_version")

    # Update the file with the new content
    printf "%s\n" "$new_content" > "$file"

    # Try to create and push the new tag with a locking mechanism
    local new_tag="${filename}_v$new_version"
    local lock_file=".tag_creation_lock"
    local lock_timeout=60
    local start_time=$(date +%s)

    while : ; do
        # Attempt to create a lock file
        if ( set -o noclobber; echo "$$" > "$lock_file" ) 2> /dev/null; then
            trap 'rm -f "$lock_file"; exit $?' INT TERM EXIT

            # Create and push the new tag
            if git tag -a "$new_tag" -m "Version $new_version"; then
                if git push origin "$new_tag"; then
                    rm -f "$lock_file"
                    trap - INT TERM EXIT
                    break
                else
                    rm -f "$lock_file"
                    trap - INT TERM EXIT
                    echo "Failed to push tag $new_tag. Exiting."
                    exit 1
                fi
            else
                rm -f "$lock_file"
                trap - INT TERM EXIT
                echo "Tag $new_tag already exists. Incrementing version..."
                new_version=$(get_next_version)
                new_tag="${filename}_v$new_version"
            fi
        else
            # Check if lock timeout has been reached
            if (( $(date +%s) - $start_time > $lock_timeout )); then
                echo "Error: Failed to acquire lock within $lock_timeout seconds."
                exit 1
            fi
            echo "Waiting for lock... retrying"
            sleep 2
        fi
    done
}

# Fetch tags once before processing files
# Force overwrite local tags with remote tags
max_retries=3
for i in $(seq 1 $max_retries); do
    if git fetch --tags -f; then
        break
    elif [ "$i" -eq "$max_retries" ]; then
        echo "Error: Failed to fetch tags after $max_retries attempts."
        exit 1
    fi
    echo "Retrying fetch tags... ($i/$max_retries)"
    sleep 2
done

# Find all Perl scripts and INI files being committed
files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.pl$|\.ini$')

if [ -n "$files" ]; then
    for file in $files; do
        if [[ $file == *.pl ]]; then
            # Update the header of Perl scripts
            update_header_perl "$file"
        elif [[ $file == *.ini ]]; then
            # Update the header of INI files
            update_header_ini "$file"
        fi
        # Stage the updated file
        git add "$file"
    done
fi

exit 0
